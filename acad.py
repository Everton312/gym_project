# -*- coding: utf-8 -*-
"""academia(by_Paula_and_Everton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbhER9p7tAxh5qRhRGMN_1Vm3upLnMzU
"""

import time #biblioteca para utilizar delay entre menus

#Classes B√°sicas do Sistema
class Exercicio:
    def __init__(self, nome, repeticoes, peso):
        self.nome = nome
        self.repeticoes = repeticoes
        self.peso = peso


class Aluno:
    def __init__(self, nome, cpf, peso, altura):
        self.nome = nome
        self.cpf = cpf
        self.peso = peso
        self.altura = altura
        self.status = False


class Academia:
    def __init__(self):
        self.alunos = []
        self.treinos = []

    def cadastrar_aluno(self):  #Fun√ß√£o de Cadastro
        nome = input("Nome do aluno: ")
        cpf = int(input("CPF do aluno: "))
        while cpf < 0:
          print("Valor do CPF inv√°lido!")
          cpf = int(input("Digite um valor de CPF v√°lido: "))

        peso = float(input("Peso do aluno (em Kg): "))
        while peso < 0:
          print("Valor do peso inv√°lido!")
          peso = float(input("Digite um valor v√°lido para o peso: "))

        altura = int(input("Altura do aluno (em cm): "))
        while altura < 0:
          print("Valor da altura inv√°lido!")
          altura = int(input("Digite um valor v√°lido para a altura: "))

        aluno = Aluno(nome, cpf, peso, altura)
        self.alunos.append(aluno)
        self.treinos.append({})  # Inicializa o treino vazio para o aluno
        print("\nCarregando ...")
        print("Aluno cadastrado com sucesso‚úÖ")

    def gerenciar_treino(self): #Fun√ß√£o de gerenciamento de treino
        print("=-=-=-=-=-üèãÔ∏èGeren. de TreinoüèãÔ∏è-=-=-=-=-=")
        nome_aluno = input("Digite o nome do aluno: ")
        alunos_encontrados = self.buscar_aluno_por_nome(nome_aluno)

        if len(alunos_encontrados) == 0:
            print("Nenhum aluno encontrado com esse nome‚ùå")
            return
        elif len(alunos_encontrados) == 1:
            aluno = alunos_encontrados[0]
        else:
            print("V√°rios alunos encontrados com esse nome. Selecione o aluno desejado:")
            for i, aluno in enumerate(alunos_encontrados, start=1):
                print(f"{i}. {aluno.nome}")
            opcao = int(input("Op√ß√£o: "))
            if opcao < 1 or opcao > len(alunos_encontrados):
                print("Op√ß√£o inv√°lida‚ùå")
                return
            aluno = alunos_encontrados[opcao - 1]

        treino_semana = self.treinos[self.alunos.index(aluno)]
        dias_semana = [1, 2, 3, 4, 5, 6, 7]
        osdias =  ["Domingo", "Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado"]

        print("üìÜDias da semanaüìÜ")
        print(f"1. Domingo\n2. Segunda\n3. Ter√ßa\n4. Quarta\n5. Quinta\n6. Sexta\n7. S√°bado")

        opcao = int(input("Escolha o dia da semana: "))
        print()
        if opcao < 1 or opcao > len(dias_semana):
            print("Op√ß√£o inv√°lida‚ùå")
            return

        dia_semana = dias_semana[opcao - 1]

        if dia_semana in treino_semana:
            exercicios = treino_semana[dia_semana]
        else:
            exercicios = []

        while True:
            print("Op√ß√µes:")
            print("1. Incluir exerc√≠cio")
            print("2. Alterar exerc√≠cio")
            print("3. Excluir exerc√≠cio")
            print("4. Excluir todos os exerc√≠cios do dia")
            print("5. Voltar")
            opcao = int(input("Escolha uma op√ß√£o: "))

            if opcao == 1:
                nome_exercicio = input("Nome do exerc√≠cio: ")
                repeticoes = int(input("N√∫mero de repeti√ß√µes: "))
                peso = float(input("Peso utilizado: "))
                while peso < 0:
                  print("Imposs√≠vel utilizar peso negativo!")
                  peso = float(input("Digite o peso: "))

                exercicio = Exercicio(nome_exercicio, repeticoes, peso)
                exercicios.append(exercicio)
                treino_semana[dia_semana] = exercicios
                self.atualizar_status(aluno, treino_semana)

                print("Exerc√≠cio inclu√≠do com sucesso‚úÖ")
            elif opcao == 2:
                if len(exercicios) == 0:
                    print("Nenhum exerc√≠cio encontrado‚ùå")
                    continue

                print(f"Exerc√≠cios do treino de {dia_semana}:")
                for i, exercicio in enumerate(exercicios, start=1):
                    print()
                    time.sleep(0.5)
                    print(f"{i}. Nome: {exercicio.nome} - Repeti√ß√µes: {exercicio.repeticoes} - Peso: {exercicio.peso}")

                opcao_exercicio = int(input("Escolha o n√∫mero do exerc√≠cio que deseja alterar: "))
                if opcao_exercicio < 1 or opcao_exercicio > len(exercicios):
                    print("Op√ß√£o inv√°lida‚ùå")
                    continue

                exercicio = exercicios[opcao_exercicio - 1]

                nome_exercicio = input("Novo nome do exerc√≠cio: ")
                repeticoes = int(input("Novo n√∫mero de repeti√ß√µes: "))
                peso = float(input("Novo peso utilizado: "))

                exercicio.nome = nome_exercicio
                exercicio.repeticoes = repeticoes
                exercicio.peso = peso

                print("Exerc√≠cio alterado com sucesso‚úÖ")
            elif opcao == 3:
                if len(exercicios) == 0:
                    print("Nenhum exerc√≠cio encontrado‚ùå")
                    continue

                print(f"Exerc√≠cios do treino de {dia_semana}:")
                print()
                for i, exercicio in enumerate(exercicios, start=1):
                    print(f"{i}. Nome: {exercicio.nome} - Repeti√ß√µes: {exercicio.repeticoes} - Peso: {exercicio.peso}")
                    print()

                opcao_exercicio = int(input("Escolha o n√∫mero do exerc√≠cio que deseja excluir: "))
                if opcao_exercicio < 1 or opcao_exercicio > len(exercicios):
                    print("Op√ß√£o inv√°lida‚ùå")
                    continue

                exercicio = exercicios[opcao_exercicio - 1]
                exercicios.remove(exercicio)
                treino_semana[dia_semana] = exercicios
                self.atualizar_status(aluno, treino_semana)

                print("Exerc√≠cio exclu√≠do com sucesso‚úÖ")
            elif opcao == 4:
                if len(exercicios) == 0:
                    print("Nenhum exerc√≠cio encontrado‚ùå")
                    continue

                exercicios.clear()
                treino_semana.pop(dia_semana, None)
                self.atualizar_status(aluno, treino_semana)

                print("Todos os exerc√≠cios do dia foram exclu√≠dos com sucesso.")
            elif opcao == 5:
                break
            else:
                print("Op√ß√£o inv√°lida‚ùå")

    def buscar_aluno_por_nome(self, nome): #m√©todo de pesquisa (v√™ se parte do nome est√° incluso na lista de nomes)
        alunos_encontrados = []
        for aluno in self.alunos:
            if nome.lower() in aluno.nome.lower():
                alunos_encontrados.append(aluno)
        return alunos_encontrados

    def consultar_aluno(self, nome_aluno): #utiliza do m√©todo de pesquisa para a opera√ß√£o e exibe os dados do aluno
        alunos_encontrados = self.buscar_aluno_por_nome(nome_aluno)

        if len(alunos_encontrados) == 0:
            print("Nenhum aluno encontrado com esse nome‚ùå")
            return
        elif len(alunos_encontrados) == 1:
            aluno = alunos_encontrados[0]
        else:
            print("V√°rios alunos encontrados com esse nome. Selecione o aluno desejado:")
            for i, aluno in enumerate(alunos_encontrados, start=1):
                print(f"{i}. {aluno.nome}")
            opcao = int(input("Op√ß√£o: "))
            if opcao < 1 or opcao > len(alunos_encontrados):
                print("Op√ß√£o inv√°lida‚ùå")
                return
            aluno = alunos_encontrados[opcao - 1]

        treino_semana = self.treinos[self.alunos.index(aluno)]

        if len(treino_semana) == 0:
            print("Nenhum treino encontrado para esse aluno‚ùå")
            return
        print()
        print(f"Dados do aluno {aluno.nome}:")
        print(f"CPF: {aluno.cpf}")
        print(f"Peso: {aluno.peso} kg")
        print(f"Altura: {aluno.altura} cm")
        self.calculo_imc(aluno)

        print("Treino do aluno:")
        dias_semana = [1, 2, 3, 4, 5, 6, 7]

        for dia in dias_semana:
            if dia in treino_semana:
                exercicios = treino_semana[dia]
                print(f"{dia}:")
                for exercicio in exercicios:
                    print(f"Exerc√≠cio: {exercicio.nome} - Repeti√ß√µes: {exercicio.repeticoes} - Peso: {exercicio.peso}")
                print()

    def atualizar_status(self, aluno, treino_semana): #caso hajam treinos para o aluno, o status √© automaticamente mudado para True
        if len(treino_semana) == 0:
            aluno.status = False
        else:
            aluno.status = True

    def calculo_imc(self, aluno): #calcula com base na altura e peso e exibe com base no resultado a situa√ß√£o do aluno
        altura_m = aluno.altura / 100
        imc = aluno.peso / (altura_m ** 2)

        if imc < 18.5:
            status = "Abaixo do peso"
        elif imc < 24.9:
            status = "Peso normal"
        elif imc < 29.9:
            status = "Sobrepeso"
        elif imc < 34.9:
            status = "Obesidade grau 1"
        elif imc < 39.9:
            status = "Obesidade grau 2"
        else:
            status = "Obesidade grau 3"

        print(f"IMC: {imc:.2f} - {status}")


    def atualizar_cadastro_aluno(self): #utiliza da pesquisa e alguns elementos do consultar aluno e solicita novos valores cadastrais
        nome_pesquisa = input("Digite o nome do aluno: ")
        time.sleep(0.5)
        alunos_encontrados = self.buscar_aluno_por_nome(nome_pesquisa)
        if len(alunos_encontrados) == 0:
            print("Nenhum aluno encontrado com esse nome‚ùå")
            return
        elif len(alunos_encontrados) == 1:
            aluno = alunos_encontrados[0]
            print(f"Atualizando cadastro do aluno: {aluno.nome}")
            aluno.nome = input("Novo nome: ")
            cpfomg= int(input("Novo CPF: "))
            while cpfomg <= 0:
              print("Cpf inv√°lido‚ùå")
              cpfomg = int(input("Digite um valor v√°lido para o CPF: "))
            aluno.cpf = cpfomg

            pesoomg = float(input("Novo peso: "))
            while pesoomg <= 0:
              print("Peso inv√°lido‚ùå")
              pesoomg = float(input("Digite um valor v√°lido para o peso: "))
            aluno.peso = pesoomg
            alturaomg = float(input("Nova altura: "))
            while alturaomg <= 0:
              print("Altura inv√°lida‚ùå")
              alturaomg = float(input("Digite um valor v√°lido para a altura: "))
            aluno.altura = alturaomg
            print("Cadastro atualizado com sucesso‚úÖ")
        else:
            print("V√°rios alunos encontrados com esse nome. Selecione o aluno desejado:")
            for i, aluno in enumerate(alunos_encontrados, start=1):
                print(f"{i}. {aluno.nome}")
            opcao = int(input("Op√ß√£o: "))
            if opcao < 1 or opcao > len(alunos_encontrados):
                print("Op√ß√£o inv√°lida‚ùå")
                return
            aluno = alunos_encontrados[opcao - 1]

    def relatorio_alunos(self, status): #utiliza do filtro para exibir alunos True/False ou todos
        if status == "todos":
            alunos_filtrados = self.alunos
            time.sleep(1)
        elif status == "ativos":
            time.sleep(0.5)
            alunos_filtrados = [aluno for aluno in self.alunos if aluno.status]
        elif status == "inativos":
            time.sleep(0.5)
            alunos_filtrados = [aluno for aluno in self.alunos if not aluno.status]
        else:
            print("Op√ß√£o inv√°lida‚ùå")
            return

        alunos_ordenados = sorted(alunos_filtrados, key=lambda aluno: aluno.nome)

        print("Relat√≥rio de Alunos:")
        for aluno in alunos_ordenados:
            print(f"Nome: {aluno.nome} | CPF: {aluno.cpf} | Peso: {aluno.peso} | Altura: {aluno.altura} | "
                  f"Status: {'Ativo' if aluno.status else 'Inativo'}")


    def excluir_aluno(alunos, nome_aluno):
      for aluno in academia.alunos:
        if aluno.nome == nome_aluno:
          print(aluno.nome)
          print("Tem certeza que deseja excluir este aluno?")
          print("1 - Sim\n2 - N√£o")
          decis= int(input())
          if decis == 1:
            academia.alunos.remove(aluno)
            print("Remo√ß√£o efeituada com sucesso‚úÖ")
            break
          if decis == 2:
            break

academia = Academia()

while True:
    print("Bem vindo ao sistema da üí™Gymtasticüí™!\n\nCarregando...")
    time.sleep(1.5)
    print()
    print("=-=-=-=-=-üí†Menuüí†-=-=-=-=-=")
    print("1. Cadastrar aluno")
    print("2. Gerenciar treino")
    print("3. Consultar aluno")
    print("4. Atualizar cadastro do aluno")
    print("5. Excluir aluno")
    print("6. Relat√≥rio de alunos")
    print("0. Sair")

    opcao_menu = input("Escolha uma op√ß√£o: ")
    try:
        opcao_menu= int(opcao_menu)
    except ValueError:
        print("Op√ß√£o inv√°lida. Por favor, insira um n√∫mero.")
        print()
        continue

    time.sleep(1.5)

    if opcao_menu == 1:
        print()
        print("=-=-=-=-=-üìùCadastroüìù-=-=-=-=-=")
        academia.cadastrar_aluno()
    elif opcao_menu == 2:
        academia.gerenciar_treino()
    elif opcao_menu == 3:
        print("=-=-=-=-=-üîçPesquisaüîé-=-=-=-=-=")
        nome_aluno = input("Digite o nome do aluno: ")
        academia.consultar_aluno(nome_aluno)
    elif opcao_menu == 4:
        academia.atualizar_cadastro_aluno()
    elif opcao_menu == 5:
        print("=-=-=-=-=-üóëÔ∏èExcluir alunoüóëÔ∏è-=-=-=-=-=")
        nome_aluno = input("Digite o nome completo do aluno: ")
        academia.excluir_aluno(nome_aluno)
    elif opcao_menu == 6:
        print("=-=-=-=-=-üìãRelat√≥riosüìã-=-=-=-=-=")
        print("1 - Todos")
        print("2 - Ativos")
        print("3 - Inativos")
        filtro = int(input("Escolha uma op√ß√£o: "))
        if filtro == 1:
            status = "todos"
        elif filtro == 2:
            status = "ativos"
        elif filtro == 3:
            status = "inativos"
        else:
            print("Op√ß√£o inv√°lida‚ùå")
            continue
        academia.relatorio_alunos(status)
    elif opcao_menu == 0:
        break
    else:
        print("Op√ß√£o inv√°lida‚ùå")